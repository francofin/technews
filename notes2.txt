We'll use a node package called bcrypt to perform the hashing function. 
We could've chosen other alternatives, but bcrypt has a proven, consistent track record of security. 
Its popularity and adoption by different computer languages further underscores its value.

Thankfully, we can use special Sequelize functions called hooks in the model. 
Also known as lifecycle events, hooks are functions that are called before or after calls in Sequelize.

The nested level of the object inserted is very important. Notice that the hooks property was added to the second object in User.init().

We use the beforeCreate() hook to execute the bcrypt hash function on the plaintext password. In the bcrypt hash function, 
we pass in the userData object that contains the plaintext password in the password property. We also pass in a saltRound value of 10.
The resulting hashed password is then passed to the Promise object as a newUserData object with a hashed password property. 
The return statement then exits out of the function, returning the hashed password in the newUserData function.


Good thing there is another method to handle async functions that will make the code more concise and legible.
 We will use the async/await syntax to replace the Promise.

 The async keyword is used as a prefix to the function that contains the asynchronous function. 
 await can be used to prefix the async function, which will then gracefully assign the value from the response to the newUserData's password property.
  The newUserData is then returned to the application with the hashed password.

  To log in to a user's account, we'll verify the user's identity using the user's email address and password. 
  We could've used the username, but email is a unique identifier and preferred in case there are duplicate usernames.


In this case, a login route could've used the GET method since it doesn't actually create or insert anything into the database.
 But there is a reason why a POST is the standard for the login that's in process.

A GET method carries the request parameter appended in the URL string, whereas a POST method carries the request parameter in req.body,
 which makes it a more secure way of transferring data from the client to the server.
 Remember, the password is still in plaintext, which makes this transmission process a vulnerable link in the chain.

 if the user's email is in the database, 
 this instance of a user must be returned in a Promise so we can proceed with the password verification process.

 We'll want to use bcrypt again to compare a plaintext password to its encrypted form.

The documentation has a Check a Password section. 
The bcrypt package offers an async method called compare that takes in two parameters: 
the plaintext password from the user and the hashed password from the database. 
Then the function compares them. If they match, true is returned. If they don't, false is returned.

Using the keyword this, we can access this user's properties, including the password, which was stored as a hashed string.

As the issue shows, we'll create the Post data model to enable users to create and manipulate posts or new articles. 
We'll also create the RESTful Express APIs to allow CRUD operations to be performed on the MySQL database similar to 
how we created the User routes in the previous lesson.

You’ll always need to define a model before you can create associations between that model and other models you’ve already created.

Using the references property, we establish the relationship between this post and the user by creating a reference to the User model, 
specifically to the id column that is defined by the key property, which is the primary key. 
The user_id is conversely defined as the foreign key and will be the matching link.

